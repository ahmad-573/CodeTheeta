DATABASE NAME: ct_db

** CREATE TABLE **
create table solver(
	user_id      int not null auto_increment,
	full_name    varchar(100) not null,       
	username     varchar(100) not null,
	password     varchar(100) not null,
	points       int not null default 0,
	primary key(user_ID));

create table admin(
	admin_id int not null auto_increment,
	referral_id int,
	full_name varchar(100) not null,
	username varchar(100) not null,
	password varchar(100) not null,
	primary key(admin_id)
);

create table problem_set(
	problem_id int not null auto_increment,
	title varchar(100) not null,
	difficulty int not null,
	times_solved int not null default 0,
	statement longtext not null,
	test_case1 longtext not null,
	test_case2 longtext not null,
	output1 longtext not null, 
	output2 longtext not null,
	primary key(problem_id)
);

create table solved(
	user_id int not null,
	problem_id int not null,
	max_score int not null,
	primary key(user_id,problem_id),
	foreign key(problem_id) references problem_set(problem_id)
		on delete cascade
		on update cascade,
	foreign key(user_id) references solver(user_id)
		on delete cascade
		on update cascade
);

create table created(
	problem_id int not null,
	admin_id int not null,
	primary key(problem_id),
	foreign key(problem_id) references problem_set(problem_id)
		on delete cascade
		on update cascade,
	foreign key(admin_id) references admin(admin_id)
		on delete cascade
		on update cascade
);
*** Other Queries ***

<<<<<<< HEAD
create table comments(
	c_id int not null auto_increment,
	user_id int not null,
	content longtext not null,
	likes int not null default 0,
	dislikes int not null default 0,
	primary key(c_id),
	foreign key(user_id) references solver(user_id)
		on delete cascade
		on update cascade
);

create table liked(
	c_id int not null,
	user_id int not null,
	primary key(c_id,user_id)
	foreign key(c_id) references comments(c_id)
		on delete cascade
		on update cascade,
	foreign key(user_id) references solver(user_id)
		on delete cascade
		on update cascade
);

create table disliked(
	c_id int not null,
	user_id int not null,
	primary key(c_id,user_id),
	foreign key(c_id) references comments(c_id)
		on delete cascade
		on update cascade,
	foreign key(user_id) references solver(user_id)
		on delete cascade
		on update cascade
);

=======
Create table queries:

Admin:

CREATE TABLE codetheeta.admin (
  admin_ID CHAR(5) NOT NULL,
  referral_ID CHAR(5) NOT NULL,
  full_name VARCHAR(20) NOT NULL,
  email VARCHAR(30) NULL,
  username VARCHAR(20) NOT NULL,
  password VARCHAR(20) NOT NULL,
  PRIMARY KEY (adminId),
  UNIQUE INDEX referral_ID_UNIQUE (referralID ASC) VISIBLE,
  UNIQUE INDEX username_UNIQUE (username ASC) VISIBLE)

Solver:

CREATE TABLE codetheeta.solver (
  user_ID CHAR(5) NOT NULL,
  full_name VARCHAR(40) NOT NULL,
  username VARCHAR(20) NOT NULL,
  password VARCHAR(20) NOT NULL,
  points INT NULL,
  PRIMARY KEY (user_ID));

Solver Use Cases:

1) Create Profile:

Check if username already exists(ahmad and fahad will check through flask):

select username from solver where username = provided_username 
***if this returns a row, python program will return true, else false and python program will display error message***

If username does not already exist, python program will send request to insert
insert into solver values(s1, s2, s3, s4, s5);

2) Login

select username from solver where username = provided_username and password = provided password ***If this returns a row, python program will return true, else
false and python program will display error message***

3) Logout

nothing to do with the database.

Admin:

1) when the user login in the api should return account type which can be appened to the url so when we redict we can have access to users role.

2) frontend will have condition which will only show button of create account for the user with role admin.

3) Logout

nothing to do with the database.
>>>>>>> 2015d41622d3c57d2de930036011d198abf46820
